// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: mcps.sql

package db

import (
	"context"
)

const createMCP = `-- name: CreateMCP :one
INSERT INTO
  "MCPs" (
    "location",
    "capacity"
  )
VALUES
  ($1, $2)
RETURNING id, location, capacity, created_at, updated_at
`

type CreateMCPParams struct {
	Location string `json:"location"`
	Capacity string `json:"capacity"`
}

func (q *Queries) CreateMCP(ctx context.Context, arg CreateMCPParams) (MCP, error) {
	row := q.db.QueryRowContext(ctx, createMCP, arg.Location, arg.Capacity)
	var i MCP
	err := row.Scan(
		&i.ID,
		&i.Location,
		&i.Capacity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllMCPs = `-- name: ListAllMCPs :many
SELECT id, location, capacity, created_at, updated_at FROM "MCPs" 
ORDER BY id
`

func (q *Queries) ListAllMCPs(ctx context.Context) ([]MCP, error) {
	rows, err := q.db.QueryContext(ctx, listAllMCPs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MCP{}
	for rows.Next() {
		var i MCP
		if err := rows.Scan(
			&i.ID,
			&i.Location,
			&i.Capacity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
