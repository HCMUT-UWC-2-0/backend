// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: workers.sql

package db

import (
	"context"
	"time"
)

const createWorker = `-- name: CreateWorker :one
INSERT INTO
  "Workers" (
    "ssn",
    "name",
    "phone",
    "age",
    "worker_type",
    "gender",
    "date_of_birth",
    "place_of_birth"
  )
VALUES
  ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, ssn, name, phone, age, worker_type, gender, date_of_birth, place_of_birth, created_at, updated_at
`

type CreateWorkerParams struct {
	Ssn          string     `json:"ssn"`
	Name         string     `json:"name"`
	Phone        string     `json:"phone"`
	Age          int32      `json:"age"`
	WorkerType   WorkerType `json:"worker_type"`
	Gender       GenderType `json:"gender"`
	DateOfBirth  time.Time  `json:"date_of_birth"`
	PlaceOfBirth string     `json:"place_of_birth"`
}

func (q *Queries) CreateWorker(ctx context.Context, arg CreateWorkerParams) (Worker, error) {
	row := q.db.QueryRowContext(ctx, createWorker,
		arg.Ssn,
		arg.Name,
		arg.Phone,
		arg.Age,
		arg.WorkerType,
		arg.Gender,
		arg.DateOfBirth,
		arg.PlaceOfBirth,
	)
	var i Worker
	err := row.Scan(
		&i.ID,
		&i.Ssn,
		&i.Name,
		&i.Phone,
		&i.Age,
		&i.WorkerType,
		&i.Gender,
		&i.DateOfBirth,
		&i.PlaceOfBirth,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createWorkerStatus = `-- name: CreateWorkerStatus :one
INSERT INTO
  "WorkerStatus" (
    "worker_id"
  )
VALUES
  ($1)
RETURNING id, worker_id, status, created_at, updated_at
`

func (q *Queries) CreateWorkerStatus(ctx context.Context, workerID int32) (WorkerStatus, error) {
	row := q.db.QueryRowContext(ctx, createWorkerStatus, workerID)
	var i WorkerStatus
	err := row.Scan(
		&i.ID,
		&i.WorkerID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllWorkers = `-- name: ListAllWorkers :many
SELECT id, ssn, name, phone, age, worker_type, gender, date_of_birth, place_of_birth, created_at, updated_at FROM "Workers" 
WHERE "worker_type" = $1
ORDER BY id
`

func (q *Queries) ListAllWorkers(ctx context.Context, workerType WorkerType) ([]Worker, error) {
	rows, err := q.db.QueryContext(ctx, listAllWorkers, workerType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Worker{}
	for rows.Next() {
		var i Worker
		if err := rows.Scan(
			&i.ID,
			&i.Ssn,
			&i.Name,
			&i.Phone,
			&i.Age,
			&i.WorkerType,
			&i.Gender,
			&i.DateOfBirth,
			&i.PlaceOfBirth,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkerStatus = `-- name: UpdateWorkerStatus :one
UPDATE "WorkerStatus"
SET "status" = $2
WHERE "worker_id" = $1
RETURNING id, worker_id, status, created_at, updated_at
`

type UpdateWorkerStatusParams struct {
	WorkerID int32            `json:"worker_id"`
	Status   WorkerStatusType `json:"status"`
}

func (q *Queries) UpdateWorkerStatus(ctx context.Context, arg UpdateWorkerStatusParams) (WorkerStatus, error) {
	row := q.db.QueryRowContext(ctx, updateWorkerStatus, arg.WorkerID, arg.Status)
	var i WorkerStatus
	err := row.Scan(
		&i.ID,
		&i.WorkerID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
