// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/HCMUT-UWC-2-0/backend/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/HCMUT-UWC-2-0/backend/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateBackOfficer mocks base method.
func (m *MockStore) CreateBackOfficer(arg0 context.Context, arg1 db.CreateBackOfficerParams) (db.BackOfficer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackOfficer", arg0, arg1)
	ret0, _ := ret[0].(db.BackOfficer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackOfficer indicates an expected call of CreateBackOfficer.
func (mr *MockStoreMockRecorder) CreateBackOfficer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackOfficer", reflect.TypeOf((*MockStore)(nil).CreateBackOfficer), arg0, arg1)
}

// CreateWorker mocks base method.
func (m *MockStore) CreateWorker(arg0 context.Context, arg1 db.CreateWorkerParams) (db.Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorker", arg0, arg1)
	ret0, _ := ret[0].(db.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorker indicates an expected call of CreateWorker.
func (mr *MockStoreMockRecorder) CreateWorker(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorker", reflect.TypeOf((*MockStore)(nil).CreateWorker), arg0, arg1)
}

// GetBackOfficer mocks base method.
func (m *MockStore) GetBackOfficer(arg0 context.Context, arg1 string) (db.BackOfficer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackOfficer", arg0, arg1)
	ret0, _ := ret[0].(db.BackOfficer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackOfficer indicates an expected call of GetBackOfficer.
func (mr *MockStoreMockRecorder) GetBackOfficer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackOfficer", reflect.TypeOf((*MockStore)(nil).GetBackOfficer), arg0, arg1)
}

// ListAllWorkers mocks base method.
func (m *MockStore) ListAllWorkers(arg0 context.Context, arg1 db.WorkerType) ([]db.Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllWorkers", arg0, arg1)
	ret0, _ := ret[0].([]db.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllWorkers indicates an expected call of ListAllWorkers.
func (mr *MockStoreMockRecorder) ListAllWorkers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllWorkers", reflect.TypeOf((*MockStore)(nil).ListAllWorkers), arg0, arg1)
}
