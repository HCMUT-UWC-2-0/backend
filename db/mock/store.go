// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DV-Lab/zuni-backend/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/DV-Lab/zuni-backend/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockStore) CreateAccount(arg0 context.Context, arg1 db.CreateAccountParams) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockStoreMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStore)(nil).CreateAccount), arg0, arg1)
}

// CreateAdmin mocks base method.
func (m *MockStore) CreateAdmin(arg0 context.Context, arg1 db.CreateAdminParams) (db.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", arg0, arg1)
	ret0, _ := ret[0].(db.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockStoreMockRecorder) CreateAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockStore)(nil).CreateAdmin), arg0, arg1)
}

// CreateStudent mocks base method.
func (m *MockStore) CreateStudent(arg0 context.Context, arg1 db.CreateStudentParams) (db.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStudent", arg0, arg1)
	ret0, _ := ret[0].(db.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStudent indicates an expected call of CreateStudent.
func (mr *MockStoreMockRecorder) CreateStudent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudent", reflect.TypeOf((*MockStore)(nil).CreateStudent), arg0, arg1)
}

// CreteDegree mocks base method.
func (m *MockStore) CreteDegree(arg0 context.Context, arg1 db.CreteDegreeParams) (db.Degree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreteDegree", arg0, arg1)
	ret0, _ := ret[0].(db.Degree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreteDegree indicates an expected call of CreteDegree.
func (mr *MockStoreMockRecorder) CreteDegree(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreteDegree", reflect.TypeOf((*MockStore)(nil).CreteDegree), arg0, arg1)
}

// DeleteDegree mocks base method.
func (m *MockStore) DeleteDegree(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDegree", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDegree indicates an expected call of DeleteDegree.
func (mr *MockStoreMockRecorder) DeleteDegree(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDegree", reflect.TypeOf((*MockStore)(nil).DeleteDegree), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockStore) GetAccount(arg0 context.Context, arg1 string) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockStoreMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockStore)(nil).GetAccount), arg0, arg1)
}

// GetAdmin mocks base method.
func (m *MockStore) GetAdmin(arg0 context.Context, arg1 string) (db.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdmin", arg0, arg1)
	ret0, _ := ret[0].(db.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdmin indicates an expected call of GetAdmin.
func (mr *MockStoreMockRecorder) GetAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdmin", reflect.TypeOf((*MockStore)(nil).GetAdmin), arg0, arg1)
}

// GetDegree mocks base method.
func (m *MockStore) GetDegree(arg0 context.Context, arg1 db.GetDegreeParams) (db.Degree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDegree", arg0, arg1)
	ret0, _ := ret[0].(db.Degree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDegree indicates an expected call of GetDegree.
func (mr *MockStoreMockRecorder) GetDegree(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDegree", reflect.TypeOf((*MockStore)(nil).GetDegree), arg0, arg1)
}

// GetStudent mocks base method.
func (m *MockStore) GetStudent(arg0 context.Context, arg1 string) (db.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudent", arg0, arg1)
	ret0, _ := ret[0].(db.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudent indicates an expected call of GetStudent.
func (mr *MockStoreMockRecorder) GetStudent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudent", reflect.TypeOf((*MockStore)(nil).GetStudent), arg0, arg1)
}

// InsertStudentTx mocks base method.
func (m *MockStore) InsertStudentTx(arg0 context.Context, arg1 db.InsertStudentTxParams) (db.InsertStudentTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertStudentTx", arg0, arg1)
	ret0, _ := ret[0].(db.InsertStudentTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertStudentTx indicates an expected call of InsertStudentTx.
func (mr *MockStoreMockRecorder) InsertStudentTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertStudentTx", reflect.TypeOf((*MockStore)(nil).InsertStudentTx), arg0, arg1)
}

// UpdateDegreeInfo mocks base method.
func (m *MockStore) UpdateDegreeInfo(arg0 context.Context, arg1 db.UpdateDegreeInfoParams) (db.Degree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDegreeInfo", arg0, arg1)
	ret0, _ := ret[0].(db.Degree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDegreeInfo indicates an expected call of UpdateDegreeInfo.
func (mr *MockStoreMockRecorder) UpdateDegreeInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDegreeInfo", reflect.TypeOf((*MockStore)(nil).UpdateDegreeInfo), arg0, arg1)
}

// UpdatePasswordAccount mocks base method.
func (m *MockStore) UpdatePasswordAccount(arg0 context.Context, arg1 db.UpdatePasswordAccountParams) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePasswordAccount", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePasswordAccount indicates an expected call of UpdatePasswordAccount.
func (mr *MockStoreMockRecorder) UpdatePasswordAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePasswordAccount", reflect.TypeOf((*MockStore)(nil).UpdatePasswordAccount), arg0, arg1)
}
